openapi: 3.0.0
info:
  description: API für das JassSpiel Backend
  title: JassSpiel API
  version: v1.0.0
servers:
- description: Lokaler Entwicklungsserver
  url: http://localhost:3000
tags:
- description: "Operationen im Zusammenhang mit Spielen (Erstellen, Beitreten, Spieler\
    \ verwalten, Spielstatus)"
  name: Games
- description: "Operationen innerhalb einer spezifischen Spielrunde (Züge, Karten,\
    \ Rundenstatus)"
  name: Rounds
- description: Allgemeine Informationen und Operationen zu Karten
  name: Cards
- description: Benutzerverwaltung
  name: Users
paths:
  /cards:
    get:
      operationId: cards_get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Jasskarte"
                type: array
          description: Eine Liste aller Jasskarten.
      summary: Holt alle verfügbaren Jasskarten.
      tags:
      - Cards
      x-openapi-router-controller: openapi_server.controllers.cards_controller
  /cards/determine-winning-card:
    post:
      operationId: cards_determine_winning_card_post
      parameters:
      - explode: true
        in: query
        name: gid
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DetermineWinningCardRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WinningCardResponse"
          description: "UID des Spielers, der die gewinnende Karte gespielt hat."
      summary: Bestimmt die gewinnende Karte aus einer Liste von gespielten Karten
        für ein Spiel.
      tags:
      - Cards
      x-openapi-router-controller: openapi_server.controllers.cards_controller
  /cards/{cid}:
    get:
      operationId: cards_cid_get
      parameters:
      - explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jasskarte"
          description: Die angeforderte Jasskarte.
        "404":
          description: Karte nicht gefunden.
      summary: Holt eine spezifische Jasskarte anhand ihrer CID.
      tags:
      - Cards
      x-openapi-router-controller: openapi_server.controllers.cards_controller
  /cards/{cid}/type:
    get:
      operationId: cards_cid_type_get
      parameters:
      - explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cards_cid_type_get_200_response"
          description: Kartentyp.
      summary: Holt den Typ einer spezifischen Karte.
      tags:
      - Cards
      x-openapi-router-controller: openapi_server.controllers.cards_controller
  /games:
    post:
      description: Generiert einen einzigartigen Spielcode (GID) und initialisiert
        das Spiel.
      operationId: games_post
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_post_201_response"
          description: Spiel erfolgreich erstellt.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Interner Serverfehler.
      summary: Erstellt ein neues Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/card-info/{cid}:
    get:
      operationId: games_gid_card_info_cid_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailsResponse"
          description: Kartendetails.
      summary: Holt eine Karte in einer Runde
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/cards/shuffle:
    post:
      operationId: games_gid_cards_shuffle_post
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Karten erfolgreich gemischt und verteilt.
      summary: Mischt und verteilt Karten an die Spieler eines Spiels.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/current-round-id:
    get:
      operationId: games_gid_current_round_id_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_current_round_id_get_200_response"
          description: Aktuelle Runden-ID.
      summary: Holt die ID der aktuellen Runde für ein Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/current-round-number:
    get:
      operationId: games_gid_current_round_number_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_current_round_number_get_200_response"
          description: Aktuelle Rundennummer.
      summary: Holt die Nummer der aktuellen Runde.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/join:
    post:
      description: Aktualisiert die Teilnehmerzahl des Spiels.
      operationId: games_gid_join_post
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Erfolgreich beigetreten.
        "404":
          description: Spiel nicht gefunden.
      summary: Lässt einen Spieler einem Spiel beitreten.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/next-player-uid:
    get:
      operationId: games_gid_next_player_uid_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: playernumber
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_next_player_uid_get_200_response"
          description: UID des nächsten Spielers.
      summary: Holt die UID des nächsten Spielers basierend auf der Spielernummer.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/players:
    get:
      operationId: games_gid_players_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Spieler"
                type: array
          description: Liste der Spieler.
      summary: Lädt alle Spieler für ein Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
    post:
      description: Speichert den Benutzer falls nötig und weist ihm eine Spielernummer
        zu.
      operationId: games_gid_players_post
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPlayerRequest"
        required: true
      responses:
        "201":
          description: Spieler erfolgreich hinzugefügt.
        "400":
          description: Ungültige Anfrage.
      summary: Fügt einen Spieler zu einem Spiel hinzu.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/rounds:
    post:
      operationId: games_gid_rounds_post
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartNewRoundRequest"
        required: true
      responses:
        "201":
          description: Neue Runde erfolgreich gestartet.
      summary: Startet eine neue Runde in einem Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/trumpf-suit:
    put:
      operationId: games_gid_trumpf_suit_put
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrumpfRequest"
        required: true
      responses:
        "200":
          description: Trumpf erfolgreich aktualisiert.
      summary: Aktualisiert die Trumpffarbe für ein Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/update-scores:
    post:
      operationId: games_gid_update_scores_post
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavePointsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_update_scores_post_200_response"
          description: Punkte erfolgreich gespeichert.
      summary: Speichert Punkte für Gewinner und Teamkollegen.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/users/{uid}/card-count:
    get:
      operationId: games_gid_users_uid_card_count_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_users_uid_card_count_get_200_response"
          description: Anzahl der Karten.
      summary: Holt die Anzahl der Karten eines Spielers.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/users/{uid}/cards:
    get:
      operationId: games_gid_users_uid_cards_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Jasskarte"
                type: array
          description: Liste der Karten des Spielers.
      summary: Holt die Karten eines bestimmten Spielers in einem Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /games/{gid}/users/{uid}/player-number:
    get:
      operationId: games_gid_users_uid_player_number_get
      parameters:
      - explode: false
        in: path
        name: gid
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_users_uid_player_number_get_200_response"
          description: Spielernummer.
      summary: Holt die Spielernummer eines Benutzers in einem Spiel.
      tags:
      - Games
      x-openapi-router-controller: openapi_server.controllers.games_controller
  /rounds/{rid}/first-card:
    get:
      operationId: rounds_rid_first_card_get
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jasskarte"
          description: Jasskarten-Objekt oder null.
      summary: Holt das Objekt der ersten gespielten Karte in einer Runde.
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
  /rounds/{rid}/first-card-cid:
    get:
      operationId: rounds_rid_first_card_cid_get
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rounds_rid_first_card_cid_get_200_response"
          description: CID der ersten Karte oder leer.
      summary: Holt die CID der ersten gespielten Karte in einer Runde.
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
  /rounds/{rid}/played-cards:
    get:
      operationId: rounds_rid_played_cards_get
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Jasskarte"
                type: array
          description: Liste der gespielten Karten.
      summary: Holt alle gespielten Karten einer Runde.
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
  /rounds/{rid}/plays:
    post:
      operationId: rounds_rid_plays_post
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPlayRequest"
        required: true
      responses:
        "201":
          description: Spielzug erfolgreich hinzugefügt.
      summary: Fügt einen Spielzug (gespielte Karte) zu einer Runde hinzu.
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
  /rounds/{rid}/turn:
    get:
      operationId: rounds_rid_turn_get
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/games_gid_next_player_uid_get_200_response"
          description: UID des Spielers am Zug.
      summary: "Holt die UID des Spielers, der aktuell am Zug ist."
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
    put:
      operationId: rounds_rid_turn_put
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTurnRequest"
        required: true
      responses:
        "200":
          description: Spieler am Zug erfolgreich aktualisiert.
      summary: "Aktualisiert, welcher Spieler am Zug ist."
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
  /rounds/{rid}/winner:
    put:
      operationId: rounds_rid_winner_put
      parameters:
      - explode: false
        in: path
        name: rid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWinnerRequest"
        required: true
      responses:
        "200":
          description: Gewinner erfolgreich aktualisiert.
      summary: Aktualisiert den Gewinner einer Runde.
      tags:
      - Rounds
      x-openapi-router-controller: openapi_server.controllers.rounds_controller
  /users/{uid}:
    put:
      operationId: users_uid_put
      parameters:
      - explode: false
        in: path
        name: uid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users_uid_put_request"
        required: true
      responses:
        "200":
          description: Benutzer erfolgreich aktualisiert.
        "201":
          description: Benutzer erfolgreich erstellt.
      summary: Erstellt einen Benutzer.
      tags:
      - Users
      x-openapi-router-controller: openapi_server.controllers.users_controller
components:
  schemas:
    Jasskarte:
      example:
        symbol: symbol
        path: path
        cardtype: cardtype
        cid: cid
      properties:
        cid:
          description: Eindeutige ID der Karte.
          title: cid
          type: string
        symbol:
          description: "Farbe/Symbol der Karte (z.B. Schella, Rose)."
          title: symbol
          type: string
        cardtype:
          description: "Typ der Karte (z.B. Ass, König, 6)."
          title: cardtype
          type: string
        path:
          description: Pfad zum Bild der Karte.
          title: path
          type: string
      title: Jasskarte
      type: object
    Spieler:
      example:
        uid: uid
        name: name
        playernumber: 0
      properties:
        uid:
          description: Eindeutige ID des Spielers.
          title: uid
          type: string
        name:
          description: Name des Spielers.
          title: name
          type: string
        playernumber:
          description: Spielernummer im aktuellen Spiel.
          title: playernumber
          type: integer
      title: Spieler
      type: object
    AddPlayerRequest:
      example:
        uid: uid
        name: name
      properties:
        uid:
          title: uid
          type: string
        name:
          title: name
          type: string
      required:
      - name
      - uid
      title: AddPlayerRequest
      type: object
    AddPlayRequest:
      example:
        uid: uid
        cid: cid
      properties:
        uid:
          description: "UID des Spielers, der die Karte spielt."
          title: uid
          type: string
        cid:
          description: CID der gespielten Karte.
          title: cid
          type: string
      required:
      - cid
      - uid
      title: AddPlayRequest
      type: object
    StartNewRoundRequest:
      example:
        whichround: 0
      properties:
        whichround:
          description: Die Nummer der neuen Runde (typischerweise vorherige + 1).
          title: whichround
          type: integer
      required:
      - whichround
      title: StartNewRoundRequest
      type: object
    UpdateTrumpfRequest:
      example:
        trumpfSymbol: trumpfSymbol
      properties:
        trumpfSymbol:
          description: Das Symbol der Trumpffarbe (z.B. "Schella").
          title: trumpfSymbol
          type: string
      required:
      - trumpfSymbol
      title: UpdateTrumpfRequest
      type: object
    SavePointsRequest:
      example:
        winnerUid: winnerUid
        teammateUid: teammateUid
        playedCards:
        - symbol: symbol
          path: path
          cardtype: cardtype
          cid: cid
        - symbol: symbol
          path: path
          cardtype: cardtype
          cid: cid
      properties:
        playedCards:
          items:
            $ref: "#/components/schemas/Jasskarte"
          title: playedCards
          type: array
        winnerUid:
          title: winnerUid
          type: string
        teammateUid:
          title: teammateUid
          type: string
      required:
      - playedCards
      - teammateUid
      - winnerUid
      title: SavePointsRequest
      type: object
    DetermineWinningCardRequest:
      example:
        cards:
        - symbol: symbol
          path: path
          cardtype: cardtype
          cid: cid
        - symbol: symbol
          path: path
          cardtype: cardtype
          cid: cid
      properties:
        cards:
          items:
            $ref: "#/components/schemas/Jasskarte"
          title: cards
          type: array
      required:
      - cards
      title: DetermineWinningCardRequest
      type: object
    WinningCardResponse:
      example:
        winnerUid: winnerUid
      properties:
        winnerUid:
          title: winnerUid
          type: string
      title: WinningCardResponse
      type: object
    UpdateWinnerRequest:
      example:
        winnerUid: winnerUid
      properties:
        winnerUid:
          title: winnerUid
          type: string
      required:
      - winnerUid
      title: UpdateWinnerRequest
      type: object
    UpdateTurnRequest:
      example:
        uid: uid
      properties:
        uid:
          title: uid
          type: string
      required:
      - uid
      title: UpdateTurnRequest
      type: object
    CardDetailsResponse:
      example:
        isTrumpf: true
        value: 0
        cid: cid
        worth: 6
      properties:
        cid:
          title: cid
          type: string
        isTrumpf:
          title: isTrumpf
          type: boolean
        value:
          title: value
          type: integer
        worth:
          title: worth
          type: integer
      title: CardDetailsResponse
      type: object
    Error:
      example:
        code: 0
        message: message
      properties:
        code:
          title: code
          type: integer
        message:
          title: message
          type: string
      title: Error
      type: object
    cards_cid_type_get_200_response:
      example:
        cardtype: cardtype
      properties:
        cardtype:
          title: cardtype
          type: string
      title: cards_cid_type_get_200_response
      type: object
    games_post_201_response:
      example:
        gid: gid
      properties:
        gid:
          description: Die ID des neu erstellten Spiels.
          title: gid
          type: string
      title: games_post_201_response
      type: object
    games_gid_current_round_id_get_200_response:
      example:
        rid: rid
      properties:
        rid:
          title: rid
          type: string
      title: games_gid_current_round_id_get_200_response
      type: object
    games_gid_current_round_number_get_200_response:
      example:
        whichround: 0
      properties:
        whichround:
          title: whichround
          type: integer
      title: games_gid_current_round_number_get_200_response
      type: object
    games_gid_next_player_uid_get_200_response:
      example:
        uid: uid
      properties:
        uid:
          title: uid
          type: string
      title: games_gid_next_player_uid_get_200_response
      type: object
    games_gid_update_scores_post_200_response:
      example:
        totalPoints: 0
      properties:
        totalPoints:
          title: totalPoints
          type: integer
      title: games_gid_update_scores_post_200_response
      type: object
    games_gid_users_uid_card_count_get_200_response:
      example:
        count: 0
      properties:
        count:
          title: count
          type: integer
      title: games_gid_users_uid_card_count_get_200_response
      type: object
    games_gid_users_uid_player_number_get_200_response:
      example:
        playernumber: 0
      properties:
        playernumber:
          title: playernumber
          type: integer
      title: games_gid_users_uid_player_number_get_200_response
      type: object
    rounds_rid_first_card_cid_get_200_response:
      example:
        cid: cid
      properties:
        cid:
          nullable: true
          title: cid
          type: string
      title: rounds_rid_first_card_cid_get_200_response
      type: object
    users_uid_put_request:
      properties:
        name:
          title: name
          type: string
      title: users_uid_put_request
      type: object
