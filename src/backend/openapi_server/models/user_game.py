from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserGame(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid=None, gid=None, score=None):  # noqa: E501
        """UserGame - a model defined in OpenAPI

        :param uid: The uid of this UserGame.  # noqa: E501
        :type uid: str
        :param gid: The gid of this UserGame.  # noqa: E501
        :type gid: str
        :param score: The score of this UserGame.  # noqa: E501
        :type score: int
        """
        self.openapi_types = {
            'uid': str,
            'gid': str,
            'score': int
        }

        self.attribute_map = {
            'uid': 'UID',
            'gid': 'GID',
            'score': 'Score'
        }

        self._uid = uid
        self._gid = gid
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'UserGame':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserGame of this UserGame.  # noqa: E501
        :rtype: UserGame
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self) -> str:
        """Gets the uid of this UserGame.


        :return: The uid of this UserGame.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this UserGame.


        :param uid: The uid of this UserGame.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def gid(self) -> str:
        """Gets the gid of this UserGame.


        :return: The gid of this UserGame.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this UserGame.


        :param gid: The gid of this UserGame.
        :type gid: str
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def score(self) -> int:
        """Gets the score of this UserGame.


        :return: The score of this UserGame.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this UserGame.


        :param score: The score of this UserGame.
        :type score: int
        """

        self._score = score
