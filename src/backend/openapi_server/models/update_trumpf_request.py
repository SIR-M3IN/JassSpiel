from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateTrumpfRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, trumpf_symbol=None):  # noqa: E501
        """UpdateTrumpfRequest - a model defined in OpenAPI

        :param trumpf_symbol: The trumpf_symbol of this UpdateTrumpfRequest.  # noqa: E501
        :type trumpf_symbol: str
        """
        self.openapi_types = {
            'trumpf_symbol': str
        }

        self.attribute_map = {
            'trumpf_symbol': 'trumpfSymbol'
        }

        self._trumpf_symbol = trumpf_symbol

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateTrumpfRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateTrumpfRequest of this UpdateTrumpfRequest.  # noqa: E501
        :rtype: UpdateTrumpfRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def trumpf_symbol(self) -> str:
        """Gets the trumpf_symbol of this UpdateTrumpfRequest.

        Das Symbol der Trumpffarbe (z.B. \"Schella\").  # noqa: E501

        :return: The trumpf_symbol of this UpdateTrumpfRequest.
        :rtype: str
        """
        return self._trumpf_symbol

    @trumpf_symbol.setter
    def trumpf_symbol(self, trumpf_symbol: str):
        """Sets the trumpf_symbol of this UpdateTrumpfRequest.

        Das Symbol der Trumpffarbe (z.B. \"Schella\").  # noqa: E501

        :param trumpf_symbol: The trumpf_symbol of this UpdateTrumpfRequest.
        :type trumpf_symbol: str
        """
        if trumpf_symbol is None:
            raise ValueError("Invalid value for `trumpf_symbol`, must not be `None`")  # noqa: E501

        self._trumpf_symbol = trumpf_symbol
