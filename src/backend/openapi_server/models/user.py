from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid=None, name=None, total_points=None, games_won=None, games_played=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param uid: The uid of this User.  # noqa: E501
        :type uid: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param total_points: The total_points of this User.  # noqa: E501
        :type total_points: int
        :param games_won: The games_won of this User.  # noqa: E501
        :type games_won: int
        :param games_played: The games_played of this User.  # noqa: E501
        :type games_played: int
        """
        self.openapi_types = {
            'uid': str,
            'name': str,
            'total_points': int,
            'games_won': int,
            'games_played': int
        }

        self.attribute_map = {
            'uid': 'UID',
            'name': 'Name',
            'total_points': 'TotalPoints',
            'games_won': 'GamesWon',
            'games_played': 'GamesPlayed'
        }

        self._uid = uid
        self._name = name
        self._total_points = total_points
        self._games_won = games_won
        self._games_played = games_played

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self) -> str:
        """Gets the uid of this User.


        :return: The uid of this User.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this User.


        :param uid: The uid of this User.
        :type uid: str
        """

        self._uid = uid

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def total_points(self) -> int:
        """Gets the total_points of this User.


        :return: The total_points of this User.
        :rtype: int
        """
        return self._total_points

    @total_points.setter
    def total_points(self, total_points: int):
        """Sets the total_points of this User.


        :param total_points: The total_points of this User.
        :type total_points: int
        """

        self._total_points = total_points

    @property
    def games_won(self) -> int:
        """Gets the games_won of this User.


        :return: The games_won of this User.
        :rtype: int
        """
        return self._games_won

    @games_won.setter
    def games_won(self, games_won: int):
        """Sets the games_won of this User.


        :param games_won: The games_won of this User.
        :type games_won: int
        """

        self._games_won = games_won

    @property
    def games_played(self) -> int:
        """Gets the games_played of this User.


        :return: The games_played of this User.
        :rtype: int
        """
        return self._games_played

    @games_played.setter
    def games_played(self, games_played: int):
        """Sets the games_played of this User.


        :param games_played: The games_played of this User.
        :type games_played: int
        """

        self._games_played = games_played
