from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid=None, symbol=None, card_type=None, is_trumpf=None):  # noqa: E501
        """Card - a model defined in OpenAPI

        :param cid: The cid of this Card.  # noqa: E501
        :type cid: str
        :param symbol: The symbol of this Card.  # noqa: E501
        :type symbol: str
        :param card_type: The card_type of this Card.  # noqa: E501
        :type card_type: str
        :param is_trumpf: The is_trumpf of this Card.  # noqa: E501
        :type is_trumpf: bool
        """
        self.openapi_types = {
            'cid': str,
            'symbol': str,
            'card_type': str,
            'is_trumpf': bool
        }

        self.attribute_map = {
            'cid': 'CID',
            'symbol': 'Symbol',
            'card_type': 'CardType',
            'is_trumpf': 'IsTrumpf'
        }

        self._cid = cid
        self._symbol = symbol
        self._card_type = card_type
        self._is_trumpf = is_trumpf

    @classmethod
    def from_dict(cls, dikt) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Card of this Card.  # noqa: E501
        :rtype: Card
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self) -> str:
        """Gets the cid of this Card.


        :return: The cid of this Card.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid: str):
        """Sets the cid of this Card.


        :param cid: The cid of this Card.
        :type cid: str
        """

        self._cid = cid

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Card.


        :return: The symbol of this Card.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Card.


        :param symbol: The symbol of this Card.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def card_type(self) -> str:
        """Gets the card_type of this Card.


        :return: The card_type of this Card.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type: str):
        """Sets the card_type of this Card.


        :param card_type: The card_type of this Card.
        :type card_type: str
        """

        self._card_type = card_type

    @property
    def is_trumpf(self) -> bool:
        """Gets the is_trumpf of this Card.


        :return: The is_trumpf of this Card.
        :rtype: bool
        """
        return self._is_trumpf

    @is_trumpf.setter
    def is_trumpf(self, is_trumpf: bool):
        """Sets the is_trumpf of this Card.


        :param is_trumpf: The is_trumpf of this Card.
        :type is_trumpf: bool
        """

        self._is_trumpf = is_trumpf
