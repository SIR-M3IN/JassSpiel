from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Round(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rid=None, gid=None, winner_id=None, which_round=None):  # noqa: E501
        """Round - a model defined in OpenAPI

        :param rid: The rid of this Round.  # noqa: E501
        :type rid: str
        :param gid: The gid of this Round.  # noqa: E501
        :type gid: str
        :param winner_id: The winner_id of this Round.  # noqa: E501
        :type winner_id: str
        :param which_round: The which_round of this Round.  # noqa: E501
        :type which_round: int
        """
        self.openapi_types = {
            'rid': str,
            'gid': str,
            'winner_id': str,
            'which_round': int
        }

        self.attribute_map = {
            'rid': 'RID',
            'gid': 'GID',
            'winner_id': 'WinnerID',
            'which_round': 'WhichRound'
        }

        self._rid = rid
        self._gid = gid
        self._winner_id = winner_id
        self._which_round = which_round

    @classmethod
    def from_dict(cls, dikt) -> 'Round':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Round of this Round.  # noqa: E501
        :rtype: Round
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rid(self) -> str:
        """Gets the rid of this Round.


        :return: The rid of this Round.
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid: str):
        """Sets the rid of this Round.


        :param rid: The rid of this Round.
        :type rid: str
        """

        self._rid = rid

    @property
    def gid(self) -> str:
        """Gets the gid of this Round.


        :return: The gid of this Round.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this Round.


        :param gid: The gid of this Round.
        :type gid: str
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def winner_id(self) -> str:
        """Gets the winner_id of this Round.


        :return: The winner_id of this Round.
        :rtype: str
        """
        return self._winner_id

    @winner_id.setter
    def winner_id(self, winner_id: str):
        """Sets the winner_id of this Round.


        :param winner_id: The winner_id of this Round.
        :type winner_id: str
        """

        self._winner_id = winner_id

    @property
    def which_round(self) -> int:
        """Gets the which_round of this Round.


        :return: The which_round of this Round.
        :rtype: int
        """
        return self._which_round

    @which_round.setter
    def which_round(self, which_round: int):
        """Sets the which_round of this Round.


        :param which_round: The which_round of this Round.
        :type which_round: int
        """
        if which_round is None:
            raise ValueError("Invalid value for `which_round`, must not be `None`")  # noqa: E501

        self._which_round = which_round
