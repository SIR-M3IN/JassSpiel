from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jasskarte import Jasskarte
from openapi_server import util

from openapi_server.models.jasskarte import Jasskarte  # noqa: E501

class DetermineWinningCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cards=None):  # noqa: E501
        """DetermineWinningCardRequest - a model defined in OpenAPI

        :param cards: The cards of this DetermineWinningCardRequest.  # noqa: E501
        :type cards: List[Jasskarte]
        """
        self.openapi_types = {
            'cards': List[Jasskarte]
        }

        self.attribute_map = {
            'cards': 'cards'
        }

        self._cards = cards

    @classmethod
    def from_dict(cls, dikt) -> 'DetermineWinningCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DetermineWinningCardRequest of this DetermineWinningCardRequest.  # noqa: E501
        :rtype: DetermineWinningCardRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cards(self) -> List[Jasskarte]:
        """Gets the cards of this DetermineWinningCardRequest.


        :return: The cards of this DetermineWinningCardRequest.
        :rtype: List[Jasskarte]
        """
        return self._cards

    @cards.setter
    def cards(self, cards: List[Jasskarte]):
        """Sets the cards of this DetermineWinningCardRequest.


        :param cards: The cards of this DetermineWinningCardRequest.
        :type cards: List[Jasskarte]
        """
        if cards is None:
            raise ValueError("Invalid value for `cards`, must not be `None`")  # noqa: E501

        self._cards = cards
