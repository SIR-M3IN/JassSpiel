from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jasskarte import Jasskarte
from openapi_server import util

from openapi_server.models.jasskarte import Jasskarte  # noqa: E501

class SavePointsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, played_cards=None, winner_uid=None, teammate_uid=None):  # noqa: E501
        """SavePointsRequest - a model defined in OpenAPI

        :param played_cards: The played_cards of this SavePointsRequest.  # noqa: E501
        :type played_cards: List[Jasskarte]
        :param winner_uid: The winner_uid of this SavePointsRequest.  # noqa: E501
        :type winner_uid: str
        :param teammate_uid: The teammate_uid of this SavePointsRequest.  # noqa: E501
        :type teammate_uid: str
        """
        self.openapi_types = {
            'played_cards': List[Jasskarte],
            'winner_uid': str,
            'teammate_uid': str
        }

        self.attribute_map = {
            'played_cards': 'playedCards',
            'winner_uid': 'winnerUid',
            'teammate_uid': 'teammateUid'
        }

        self._played_cards = played_cards
        self._winner_uid = winner_uid
        self._teammate_uid = teammate_uid

    @classmethod
    def from_dict(cls, dikt) -> 'SavePointsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SavePointsRequest of this SavePointsRequest.  # noqa: E501
        :rtype: SavePointsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def played_cards(self) -> List[Jasskarte]:
        """Gets the played_cards of this SavePointsRequest.


        :return: The played_cards of this SavePointsRequest.
        :rtype: List[Jasskarte]
        """
        return self._played_cards

    @played_cards.setter
    def played_cards(self, played_cards: List[Jasskarte]):
        """Sets the played_cards of this SavePointsRequest.


        :param played_cards: The played_cards of this SavePointsRequest.
        :type played_cards: List[Jasskarte]
        """
        if played_cards is None:
            raise ValueError("Invalid value for `played_cards`, must not be `None`")  # noqa: E501

        self._played_cards = played_cards

    @property
    def winner_uid(self) -> str:
        """Gets the winner_uid of this SavePointsRequest.


        :return: The winner_uid of this SavePointsRequest.
        :rtype: str
        """
        return self._winner_uid

    @winner_uid.setter
    def winner_uid(self, winner_uid: str):
        """Sets the winner_uid of this SavePointsRequest.


        :param winner_uid: The winner_uid of this SavePointsRequest.
        :type winner_uid: str
        """
        if winner_uid is None:
            raise ValueError("Invalid value for `winner_uid`, must not be `None`")  # noqa: E501

        self._winner_uid = winner_uid

    @property
    def teammate_uid(self) -> str:
        """Gets the teammate_uid of this SavePointsRequest.


        :return: The teammate_uid of this SavePointsRequest.
        :rtype: str
        """
        return self._teammate_uid

    @teammate_uid.setter
    def teammate_uid(self, teammate_uid: str):
        """Sets the teammate_uid of this SavePointsRequest.


        :param teammate_uid: The teammate_uid of this SavePointsRequest.
        :type teammate_uid: str
        """
        if teammate_uid is None:
            raise ValueError("Invalid value for `teammate_uid`, must not be `None`")  # noqa: E501

        self._teammate_uid = teammate_uid
