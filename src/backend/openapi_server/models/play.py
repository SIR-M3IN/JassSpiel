from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Play(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pid=None, rid=None, uid=None, card_played=None):  # noqa: E501
        """Play - a model defined in OpenAPI

        :param pid: The pid of this Play.  # noqa: E501
        :type pid: str
        :param rid: The rid of this Play.  # noqa: E501
        :type rid: str
        :param uid: The uid of this Play.  # noqa: E501
        :type uid: str
        :param card_played: The card_played of this Play.  # noqa: E501
        :type card_played: str
        """
        self.openapi_types = {
            'pid': str,
            'rid': str,
            'uid': str,
            'card_played': str
        }

        self.attribute_map = {
            'pid': 'PID',
            'rid': 'RID',
            'uid': 'UID',
            'card_played': 'CardPlayed'
        }

        self._pid = pid
        self._rid = rid
        self._uid = uid
        self._card_played = card_played

    @classmethod
    def from_dict(cls, dikt) -> 'Play':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Play of this Play.  # noqa: E501
        :rtype: Play
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pid(self) -> str:
        """Gets the pid of this Play.


        :return: The pid of this Play.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid: str):
        """Sets the pid of this Play.


        :param pid: The pid of this Play.
        :type pid: str
        """

        self._pid = pid

    @property
    def rid(self) -> str:
        """Gets the rid of this Play.


        :return: The rid of this Play.
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid: str):
        """Sets the rid of this Play.


        :param rid: The rid of this Play.
        :type rid: str
        """
        if rid is None:
            raise ValueError("Invalid value for `rid`, must not be `None`")  # noqa: E501

        self._rid = rid

    @property
    def uid(self) -> str:
        """Gets the uid of this Play.


        :return: The uid of this Play.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this Play.


        :param uid: The uid of this Play.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def card_played(self) -> str:
        """Gets the card_played of this Play.


        :return: The card_played of this Play.
        :rtype: str
        """
        return self._card_played

    @card_played.setter
    def card_played(self, card_played: str):
        """Sets the card_played of this Play.


        :param card_played: The card_played of this Play.
        :type card_played: str
        """

        self._card_played = card_played
