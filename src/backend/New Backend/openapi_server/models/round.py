from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Round(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rid=None, gid=None, winnerid=None, whichround=None):  # noqa: E501
        """Round - a model defined in OpenAPI

        :param rid: The rid of this Round.  # noqa: E501
        :type rid: str
        :param gid: The gid of this Round.  # noqa: E501
        :type gid: str
        :param winnerid: The winnerid of this Round.  # noqa: E501
        :type winnerid: str
        :param whichround: The whichround of this Round.  # noqa: E501
        :type whichround: int
        """
        self.openapi_types = {
            'rid': str,
            'gid': str,
            'winnerid': str,
            'whichround': int
        }

        self.attribute_map = {
            'rid': 'RID',
            'gid': 'GID',
            'winnerid': 'winnerid',
            'whichround': 'whichround'
        }

        self._rid = rid
        self._gid = gid
        self._winnerid = winnerid
        self._whichround = whichround

    @classmethod
    def from_dict(cls, dikt) -> 'Round':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Round of this Round.  # noqa: E501
        :rtype: Round
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rid(self) -> str:
        """Gets the rid of this Round.


        :return: The rid of this Round.
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid: str):
        """Sets the rid of this Round.


        :param rid: The rid of this Round.
        :type rid: str
        """

        self._rid = rid

    @property
    def gid(self) -> str:
        """Gets the gid of this Round.


        :return: The gid of this Round.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this Round.


        :param gid: The gid of this Round.
        :type gid: str
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def winnerid(self) -> str:
        """Gets the winnerid of this Round.


        :return: The winnerid of this Round.
        :rtype: str
        """
        return self._winnerid

    @winnerid.setter
    def winnerid(self, winnerid: str):
        """Sets the winnerid of this Round.


        :param winnerid: The winnerid of this Round.
        :type winnerid: str
        """

        self._winnerid = winnerid

    @property
    def whichround(self) -> int:
        """Gets the whichround of this Round.


        :return: The whichround of this Round.
        :rtype: int
        """
        return self._whichround

    @whichround.setter
    def whichround(self, whichround: int):
        """Sets the whichround of this Round.


        :param whichround: The whichround of this Round.
        :type whichround: int
        """
        if whichround is None:
            raise ValueError("Invalid value for `whichround`, must not be `None`")  # noqa: E501

        self._whichround = whichround
