from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid=None, symbol=None, cardtype=None):  # noqa: E501
        """Card - a model defined in OpenAPI

        :param cid: The cid of this Card.  # noqa: E501
        :type cid: str
        :param symbol: The symbol of this Card.  # noqa: E501
        :type symbol: str
        :param cardtype: The cardtype of this Card.  # noqa: E501
        :type cardtype: str
        """
        self.openapi_types = {
            'cid': str,
            'symbol': str,
            'cardtype': str
        }

        self.attribute_map = {
            'cid': 'CID',
            'symbol': 'symbol',
            'cardtype': 'cardtype'
        }

        self._cid = cid
        self._symbol = symbol
        self._cardtype = cardtype

    @classmethod
    def from_dict(cls, dikt) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Card of this Card.  # noqa: E501
        :rtype: Card
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self) -> str:
        """Gets the cid of this Card.


        :return: The cid of this Card.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid: str):
        """Sets the cid of this Card.


        :param cid: The cid of this Card.
        :type cid: str
        """

        self._cid = cid

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Card.


        :return: The symbol of this Card.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Card.


        :param symbol: The symbol of this Card.
        :type symbol: str
        """

        self._symbol = symbol

    @property
    def cardtype(self) -> str:
        """Gets the cardtype of this Card.


        :return: The cardtype of this Card.
        :rtype: str
        """
        return self._cardtype

    @cardtype.setter
    def cardtype(self, cardtype: str):
        """Sets the cardtype of this Card.


        :param cardtype: The cardtype of this Card.
        :type cardtype: str
        """

        self._cardtype = cardtype
