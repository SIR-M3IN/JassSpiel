from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Game(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, status=None, room_name=None, participants=None):  # noqa: E501
        """Game - a model defined in OpenAPI

        :param gid: The gid of this Game.  # noqa: E501
        :type gid: str
        :param status: The status of this Game.  # noqa: E501
        :type status: str
        :param room_name: The room_name of this Game.  # noqa: E501
        :type room_name: str
        :param participants: The participants of this Game.  # noqa: E501
        :type participants: int
        """
        self.openapi_types = {
            'gid': str,
            'status': str,
            'room_name': str,
            'participants': int
        }

        self.attribute_map = {
            'gid': 'GID',
            'status': 'status',
            'room_name': 'room_name',
            'participants': 'participants'
        }

        self._gid = gid
        self._status = status
        self._room_name = room_name
        self._participants = participants

    @classmethod
    def from_dict(cls, dikt) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Game of this Game.  # noqa: E501
        :rtype: Game
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this Game.


        :return: The gid of this Game.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this Game.


        :param gid: The gid of this Game.
        :type gid: str
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def status(self) -> str:
        """Gets the status of this Game.


        :return: The status of this Game.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Game.


        :param status: The status of this Game.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def room_name(self) -> str:
        """Gets the room_name of this Game.


        :return: The room_name of this Game.
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name: str):
        """Sets the room_name of this Game.


        :param room_name: The room_name of this Game.
        :type room_name: str
        """
        if room_name is None:
            raise ValueError("Invalid value for `room_name`, must not be `None`")  # noqa: E501

        self._room_name = room_name

    @property
    def participants(self) -> int:
        """Gets the participants of this Game.


        :return: The participants of this Game.
        :rtype: int
        """
        return self._participants

    @participants.setter
    def participants(self, participants: int):
        """Sets the participants of this Game.


        :param participants: The participants of this Game.
        :type participants: int
        """
        if participants is None:
            raise ValueError("Invalid value for `participants`, must not be `None`")  # noqa: E501

        self._participants = participants
